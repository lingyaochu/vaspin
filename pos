#!/usr/bin/python3
#this script is to get information from poscar
import re
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-d","--directory",default=".",
                    help="the directory of the POSCAR file")
parser.add_argument('-j', '--job', default='json', choices=["json","lattice","disp"],help="the job need to be done")
parser.add_argument('-l', '--length', default=0.0, type=float, help="the length of random displacement, only for job=distort")
args = parser.parse_args()


def write_json():
    #打开poscar读取
    with open(args.directory + "/POSCAR",'r') as f:
        f.readline()
        data_str = "{\n"
        coe_lattice = f.readline().strip()
        
        data_str = data_str + "\"coe\": " + coe_lattice + ",\n"
        data_str = data_str + "\"lattice\": \n"
        
        lattice_a = re.split(r'\s{1,}',f.readline().strip())
        lattice_b = re.split(r'\s{1,}',f.readline().strip())
        lattice_c = re.split(r'\s{1,}',f.readline().strip())
        
        data_str = data_str + "[[" + lattice_a[0] + "," + lattice_a[1] + "," + lattice_a[2] + "],\n"
        data_str = data_str + " [" + lattice_b[0] + "," + lattice_b[1] + "," + lattice_b[2] + "],\n"
        data_str = data_str + " [" + lattice_c[0] + "," + lattice_c[1] + "," + lattice_c[2] + "]],\n"
        
        # for i in range(3):
        #     lattice_a[i] = float(lattice_a[i])
        #     lattice_b[i] = float(lattice_b[i])
        #     lattice_c[i] = float(lattice_c[i])
            
        atom_type = re.split(r'\s{1,}',f.readline().strip())
        for i in range(len(atom_type)):
            # 为了适配vasp6.4版本之后的POSCAR
            atom_type[i] = re.split(r'/', atom_type[i])[0]

        atom_numb = re.split(r'\s{1,}',f.readline().strip())
        atom_numb_str = "\"number\": " + "["
        data_str = data_str + "\"species\": ["
        atoms = 0
        for i in range(len(atom_numb)):
            data_str = data_str + "\"" + atom_type[i] + "\"" + ","
            atom_numb_str = atom_numb_str + atom_numb[i] + ","
            atom_numb[i] = int(atom_numb[i])
            atoms = atoms + atom_numb[i]
        
        data_str = data_str.rstrip(',')
        data_str = data_str + "],\n"
        atom_numb_str = atom_numb_str.rstrip(',') + "],"
        data_str = data_str + atom_numb_str + "\n"
        
        type_coor = f.readline().strip()
        data_str = data_str + "\"coortype\": " + "\""+type_coor+"\",\n"
        coor_str = "["
        for i in range(atoms):
            coor_x, coor_y, coor_z = re.split(r'\s{1,}',f.readline().strip())
            coor_str = coor_str + "[" + coor_x + "," + coor_y + "," + coor_z + "],\n"
        
        coor_str = coor_str.rsplit('\n',1)[0].rstrip(',') + "]\n"
        
        data_str = data_str + "\"coordinate\": \n" + coor_str + '}' 


    with open(args.directory + "/pos.json",'w') as f:
        f.writelines(data_str)

    return None

def get_lattice():
    write_json()

    from vaspin import poscar
    pos = poscar(args.directory + "/pos.json")
    a = '{:.7f}'.format(pos.abc['a'])
    b = '{:.7f}'.format(pos.abc['b'])
    c = '{:.7f}'.format(pos.abc['c'])
    print(a,b,c)


def pos_disp(length=args.length):
    """
    Randomly distort the structure by length
    """
    write_json()
    from vaspin import poscar
    pos = poscar(args.directory + "/pos.json")
    cate = pos.coor_cate + pos.random_disp(length)
    pos.write_poscar(coor_frac=pos.cate_to_frac(cate), directory=args.directory, name="POSCAR_disp")


operation = {
    "json": write_json,
    "lattice": get_lattice,
    "disp": pos_disp
}
if args.job in operation:
    operation[args.job]()
else:
    print("The job is not supported")
    exit(1)