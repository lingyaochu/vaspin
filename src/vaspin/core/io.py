"""IO Module.

Contains functionality for reading and writing VASP files.
"""

import os
import re
from json import JSONDecodeError, dumps, load, loads
from typing import Any

import numpy as np

from vaspin.types.array import FloatArray, StrArray


def read_poscar(posfile: str) -> dict[str, Any]:
    """Read POSCAR file or JSON file

    Args:
        posfile: Path to POSCAR file or JSON file

    Returns:
        Dictionary containing POSCAR data

    Raises:
        FileNotFoundError: File does not exist
    """
    if not os.path.exists(posfile):
        raise FileNotFoundError(f"File does not exist: {posfile}")

    try:
        with open(posfile, "r") as f:
            data: dict[str, Any] = load(f)
    except JSONDecodeError:
        posdata: dict[str, Any] = loads(poscar_to_json(posfile))
        data = posdata

    return data


def poscar_to_json(filepath: str) -> str:
    """Convert POSCAR file to JSON string format

    Args:
        filepath: Path to POSCAR file

    Returns:
        JSON formatted string

    Raises:
        ValueError: Invalid file format
    """
    try:
        with open(filepath, "r") as f:
            # read comment
            comment = f.readline().strip()

            # Read lattice constant and lattice vectors
            coe = float(f.readline().strip())
            lattice = []
            for _ in range(3):
                lattice.append(
                    [float(x) for x in re.split(r"\s+", f.readline().strip())]
                )

            # Read atom types and quantities
            species = [x.split("/")[0] for x in re.split(r"\s+", f.readline().strip())]
            atom_numbers = [int(x) for x in re.split(r"\s+", f.readline().strip())]

            # Read coordinate type and coordinates
            coor_type = f.readline().strip()
            total_atoms = sum(atom_numbers)
            coordinates = []
            for _ in range(total_atoms):
                coordinates.append(
                    [float(x) for x in re.split(r"\s+", f.readline().strip())]
                )

            # Build data dictionary
            data = {
                "comment": comment,
                "coe": coe,
                "lattice": lattice,
                "species": species,
                "number": atom_numbers,
                "coortype": coor_type,
                "coordinate": coordinates,
            }

            return dumps(data, indent=None)
    except (IOError, ValueError) as e:
        raise ValueError(f"Cannot parse POSCAR file {filepath}: {e}") from e


def write_poscar(
    lattice: FloatArray,
    atoms: StrArray,
    coor_frac: FloatArray,
    directory: str = ".",
    comment: str = "generated by mother python",
    name: str = "POSCAR",
) -> None:
    """Write data to POSCAR file

    Args:
        lattice: Lattice data
        atoms: the atom list data
        coor_frac: Fractional coordinate data
        directory: Directory to write file to, defaults to current directory
        comment: Description in first line of POSCAR file
        name: Name of POSCAR file, defaults to POSCAR

    Returns:
        None
    """
    from ..utils.utils import clean

    # Convert lattice data to string
    lattice_str = ""
    for i in range(3):
        lattice_str += (
            f" {lattice[i][0]:20.16f} {lattice[i][1]:20.16f} {lattice[i][2]:20.16f}\n"
        )

    # Convert coordinate data to string
    coor_str = ""
    for i in range(len(coor_frac)):
        coor_str += f" {coor_frac[i][0]:20.16f}"
        f" {coor_frac[i][1]:20.16f}"
        f" {coor_frac[i][2]:20.16f}\n"

    # Convert atom list data to string
    unique_atoms = np.unique(atoms)
    element_str = ""
    for atom in unique_atoms:
        element_str += f" {atom}"

    # Convert atom count data to string
    number_str = ""
    atoms_list = list(atoms)  # Ensure species is a Python list
    for atom in unique_atoms:
        number_str += f" {atoms_list.count(atom)}"

    # Write to file
    clean(directory)
    with open(directory + f"/{name}", "w") as f:
        f.write(comment + "\n")
        f.write(" 1.0\n")
        f.write(lattice_str)
        f.write(element_str + "\n")
        f.write(number_str + "\n")
        f.write("Direct" + "\n")
        f.write(coor_str)
